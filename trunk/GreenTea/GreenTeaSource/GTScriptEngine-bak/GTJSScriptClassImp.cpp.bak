#include "GTJSScriptClassImp.h"
#include "jsapi.h"

//--------------------------------------------------------------
// GTVector2
//--------------------------------------------------------------

/*
JSClass* JSC_GTVector2::jsClass = NULL;
JSObject* JSC_GTVector2::jsObject = NULL;

JSBool JSC_GTVector2::jsConstructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *obj = JS_NewObject(cx, JSC_GTVector2::jsClass, JSC_GTVector2::jsObject, NULL);
	JSC_GTVector2 *cobj = new JSC_GTVector2(obj);
	pointerShell_t *pt = (pointerShell_t *)JS_malloc(cx, sizeof(pointerShell_t));
	pt->flags = 0; pt->data = cobj;
	JS_SetPrivate(obj, pt);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));
	return JS_TRUE;
}
void JSC_GTVector2::jsFinalize(JSContext *cx, JSObject *obj)
{
	pointerShell_t *pt = (pointerShell_t *)JS_GetPrivate(obj);
	if (pt)
	{
		if (!(pt->flags & kPointerTemporary) && pt->data) delete (JSC_GTVector2 *)pt->data;
		JS_free(cx, pt);
	}
}
JSBool JSC_GTVector2::jsPropertyGet(JSContext *cx, JSObject *obj, jsid _id, jsval *val)
{
	int32_t propId = JSID_TO_INT(_id);
	JSC_GTVector2 *cobj; JSGET_PTRSHELL(JSC_GTVector2, cobj, obj);
	if (!cobj) return JS_FALSE;
	switch(propId)
	{
	case kX:
		do { jsval tmp; JS_NewNumberValue(cx, cobj->x, &tmp); JS_SET_RVAL(cx, val, tmp); } while (0);
		break;
	case kY:
		do { jsval tmp; JS_NewNumberValue(cx, cobj->y, &tmp); JS_SET_RVAL(cx, val, tmp); } while (0);
		break;
	default:
		break;
	}
	return JS_TRUE;
}
JSBool JSC_GTVector2::jsPropertySet(JSContext *cx, JSObject *obj, jsid _id, JSBool strict, jsval *val)
{
	int32_t propId = JSID_TO_INT(_id);
	JSC_GTVector2 *cobj; JSGET_PTRSHELL(JSC_GTVector2, cobj, obj);
	if (!cobj) return JS_FALSE;
	switch(propId)
	{
	case kX:
		do { double tmp; JS_ValueToNumber(cx, *val, &tmp); cobj->x = tmp; } while (0);
		break;
	case kY:
		do { double tmp; JS_ValueToNumber(cx, *val, &tmp); cobj->y = tmp; } while (0);
		break;
	default:
		break;
	}
	return JS_TRUE;
}
*/
void JSC_GTVector2::jsCreateClass(JSContext *cx, JSObject *globalObj, const char *name)
{
	/*jsClass = (JSClass *)calloc(1, sizeof(JSClass));
	jsClass->name = name;
	jsClass->addProperty = JS_PropertyStub;
	jsClass->delProperty = JS_PropertyStub;
	jsClass->getProperty = JS_PropertyStub;
	jsClass->setProperty = JS_StrictPropertyStub;
	jsClass->enumerate = JS_EnumerateStub;
	jsClass->resolve = JS_ResolveStub;
	jsClass->convert = JS_ConvertStub;
	jsClass->finalize = jsFinalize;
	jsClass->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] =
	{
		{"x", kX, JSPROP_PERMANENT | JSPROP_SHARED, JSC_GTVector2::jsPropertyGet, JSC_GTVector2::jsPropertySet},
		{"y", kY, JSPROP_PERMANENT | JSPROP_SHARED, JSC_GTVector2::jsPropertyGet, JSC_GTVector2::jsPropertySet},
		{0, 0, 0, 0, 0}
	};

	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};

	static JSFunctionSpec st_funcs[] = {
		JS_FN("IsEqual", JSC_GTVector2::jsIsEqual, 2, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};

	jsObject = JS_InitClass(cx,globalObj,NULL,jsClass,JSC_GTVector2::jsConstructor,0,properties,funcs,NULL,st_funcs);*/
}
/*
JSBool JSC_GTVector2::jsIsEqual(JSContext *cx, uint32_t argc, jsval *vp)
{
	if (argc == 2)
	{
		JSObject *arg0;
		JSObject *arg1;
		JS_ConvertArguments(cx, 2, JS_ARGV(cx, vp), "oo", &arg0, &arg1);
		GTVector2* narg0; JSGET_PTRSHELL(GTVector2, narg0, arg0);
		GTVector2* narg1; JSGET_PTRSHELL(GTVector2, narg1, arg1);
		bool ret = ((*narg0) == (*narg1));
		JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret));
		
		return JS_TRUE;
	}
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}
*/


//--------------------------------------------------------------
// GTLogManager
//--------------------------------------------------------------
/*
JSClass* JSC_GTLogManager::jsClass = NULL;
JSObject* JSC_GTLogManager::jsObject = NULL;

JSBool JSC_GTLogManager::jsConstructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	return JS_FALSE;
}

void JSC_GTLogManager::jsFinalize(JSContext *cx, JSObject *obj)
{
	pointerShell_t *pt = (pointerShell_t *)JS_GetPrivate(obj);
	if (pt)
	{
		//if (!(pt->flags & kPointerTemporary) && pt->data) ((S_CCDirector *)pt->data)->release();
		JS_free(cx, pt);
	}
}

JSBool JSC_GTLogManager::jsPropertyGet(JSContext *cx, JSObject *obj, jsid _id, jsval *val)
{
	return JS_TRUE;
}

JSBool JSC_GTLogManager::jsPropertySet(JSContext *cx, JSObject *obj, jsid _id, JSBool strict, jsval *val)
{
	return JS_TRUE;
}
*/
void JSC_GTLogManager::jsCreateClass(JSContext *cx, JSObject *globalObj, const char *name)
{
	/*
	jsClass = (JSClass *)calloc(1, sizeof(JSClass));
	jsClass->name = name;
	jsClass->addProperty = JS_PropertyStub;
	jsClass->delProperty = JS_PropertyStub;
	jsClass->getProperty = JS_PropertyStub;
	jsClass->setProperty = JS_StrictPropertyStub;
	jsClass->enumerate = JS_EnumerateStub;
	jsClass->resolve = JS_ResolveStub;
	jsClass->convert = JS_ConvertStub;
	jsClass->finalize = jsFinalize;
	jsClass->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] =
	{
		{0, 0, 0, 0, 0}
	};

	static JSFunctionSpec funcs[] =
	{
		JS_FS_END
	};

	static JSFunctionSpec st_funcs[] =
	{
		JS_FN("LogTrace", JSC_GTLogManager::jsLogTrace, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("LogWarning", JSC_GTLogManager::jsLogWarning, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("LogError", JSC_GTLogManager::jsLogError, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("LogComment", JSC_GTLogManager::jsLogComment, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};

	jsObject = JS_InitClass(cx,globalObj,NULL,jsClass,JSC_GTVector2::jsConstructor,0,properties,funcs,NULL,st_funcs);
	*/
}
/*
JSBool JSC_GTLogManager::jsLogTrace(JSContext *cx, uint32_t argc, jsval *vp)
{
	// None-static method
	//JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	//JSC_GTLogManager* self = NULL; JSGET_PTRSHELL(JSC_GTLogManager, self, obj);
	//if (self == NULL) return JS_FALSE;
	//if(1 == argc)
	//{
		//JSString *arg0 = NULL;
		//JS_ConvertArguments(cx, 1, JS_ARGV(cx, vp), "S", &arg0);
		//char *narg0 = JS_EncodeString(cx, arg0);
		//self->LogTrace(narg0);
		//JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	//}

	// Static method
	if(1 == argc)
	{
		JSString *arg0 = NULL;
		JS_ConvertArguments(cx, 1, JS_ARGV(cx, vp), "S", &arg0);
		char *narg0 = JS_EncodeString(cx, arg0);
		GTLogManager::GetInstance()->LogTrace(narg0);
		JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	}
	return JS_TRUE;
}
JSBool JSC_GTLogManager::jsLogWarning(JSContext *cx, uint32_t argc, jsval *vp)
{
	if(1 == argc)
	{
		JSString *arg0 = NULL;
		JS_ConvertArguments(cx, 1, JS_ARGV(cx, vp), "S", &arg0);
		char *narg0 = JS_EncodeString(cx, arg0);
		GTLogManager::GetInstance()->LogWarning(narg0);
		JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	}
	return JS_TRUE;
}
JSBool JSC_GTLogManager::jsLogError(JSContext *cx, uint32_t argc, jsval *vp)
{
	if(1 == argc)
	{
		JSString *arg0 = NULL;
		JS_ConvertArguments(cx, 1, JS_ARGV(cx, vp), "S", &arg0);
		char *narg0 = JS_EncodeString(cx, arg0);
		GTLogManager::GetInstance()->LogError(narg0);
		JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	}
	return JS_TRUE;
}
JSBool JSC_GTLogManager::jsLogComment(JSContext *cx, uint32_t argc, jsval *vp)
{
	if(1 == argc)
	{
		JSString *arg0 = NULL;
		JS_ConvertArguments(cx, 1, JS_ARGV(cx, vp), "S", &arg0);
		char *narg0 = JS_EncodeString(cx, arg0);
		GTLogManager::GetInstance()->LogComment(narg0);
		JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	}
	return JS_TRUE;
}
*/
